/* tslint:disable */
/* eslint-disable */
/**
*/
export class Account {
  free(): void;
/**
*/
  constructor();
/**
* @param {string} private_key
* @returns {Account}
*/
  static from_private_key(private_key: string): Account;
/**
* @param {Uint8Array} seed
* @returns {Account}
*/
  static from_seed(seed: Uint8Array): Account;
/**
* @returns {string}
*/
  to_private_key(): string;
/**
* @returns {string}
*/
  to_view_key(): string;
/**
* @returns {string}
*/
  to_address(): string;
/**
* @param {string} message
* @param {Uint8Array} rng_seed
* @returns {Uint8Array}
*/
  sign(message: string, rng_seed: Uint8Array): Uint8Array;
}
/**
*/
export class Address {
  free(): void;
/**
* @param {string} private_key
* @returns {Address}
*/
  static from_private_key(private_key: string): Address;
/**
* @param {string} view_key
* @returns {Address}
*/
  static from_view_key(view_key: string): Address;
/**
* @param {string} address
* @returns {Address}
*/
  static from_string(address: string): Address;
/**
* Verify a signature signed by the view key
* Returns `true` if the signature is verified correctly. Otherwise, returns `false`.
* @param {string} message
* @param {Uint8Array} signature
* @returns {boolean}
*/
  verify_signature(message: string, signature: Uint8Array): boolean;
/**
* @returns {string}
*/
  to_string(): string;
}
/**
*/
export class ViewKey {
  free(): void;
/**
* @param {string} private_key
* @returns {ViewKey}
*/
  static from_private_key(private_key: string): ViewKey;
/**
* @param {string} view_key
* @returns {ViewKey}
*/
  static from_string(view_key: string): ViewKey;
/**
* @returns {string}
*/
  to_string(): string;
}

export type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

export interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly __wbg_address_free: (a: number) => void;
  readonly address_from_private_key: (a: number, b: number) => number;
  readonly address_from_view_key: (a: number, b: number) => number;
  readonly address_from_string: (a: number, b: number) => number;
  readonly address_verify_signature: (a: number, b: number, c: number, d: number, e: number) => number;
  readonly address_to_string: (a: number, b: number) => void;
  readonly __wbg_account_free: (a: number) => void;
  readonly account_new: () => number;
  readonly account_from_private_key: (a: number, b: number) => number;
  readonly account_from_seed: (a: number, b: number) => number;
  readonly account_to_private_key: (a: number, b: number) => void;
  readonly account_to_view_key: (a: number, b: number) => void;
  readonly account_to_address: (a: number, b: number) => void;
  readonly account_sign: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
  readonly __wbg_viewkey_free: (a: number) => void;
  readonly viewkey_from_private_key: (a: number, b: number) => number;
  readonly viewkey_from_string: (a: number, b: number) => number;
  readonly viewkey_to_string: (a: number, b: number) => void;
  readonly __wbindgen_malloc: (a: number) => number;
  readonly __wbindgen_realloc: (a: number, b: number, c: number) => number;
  readonly __wbindgen_add_to_stack_pointer: (a: number) => number;
  readonly __wbindgen_free: (a: number, b: number) => void;
  readonly __wbindgen_exn_store: (a: number) => void;
}

/**
* Synchronously compiles the given `bytes` and instantiates the WebAssembly module.
*
* @param {BufferSource} bytes
*
* @returns {InitOutput}
*/
export function initSync(bytes: BufferSource): InitOutput;

/**
* If `module_or_path` is {RequestInfo} or {URL}, makes a request and
* for everything else, calls `WebAssembly.instantiate` directly.
*
* @param {InitInput | Promise<InitInput>} module_or_path
*
* @returns {Promise<InitOutput>}
*/
export default function init (module_or_path?: InitInput | Promise<InitInput>): Promise<InitOutput>;
